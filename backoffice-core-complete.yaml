  openapi: 3.1.0
  info:
    title: BackOffice Core operations API
    description: This API provides endpoints for managing core operations in the BackOffice
      system.
    termsOfService: Terms of services licences
    contact:
      name: Ernesto Luis Mosquera Heredia
      url: https://www.dev.singularit.co
      email: ernesto.mosquera@singualrit.co
    license:
      name: Licence
      url: https://www.singularit.co/licences
    version: 0.0.1
  servers:
  - url: /api/backoffice-core
    description: API context path
  security:
  - bearerAuth: []
  tags:
  - name: Authentication
    description: Authentication API
  - name: Payments
    description: Payment processing and management APIs using Stripe
  - name: Product Images
    description: APIs for managing product images
  - name: Product
    description: APIs for managing and retrieving product details
  - name: Shopping Cart Item
    description: Cart Item management APIs
  - name: Banner
    description: APIs for managing and retrieving banner details
  - name: Product Media
    description: "APIs for managing product media files (images, PDFs, videos)"
  - name: Orders
    description: Order management APIs for processing customer orders
  - name: Category
    description: APIs for managing and retrieving category details
  - name: Users
    description: APIs for managing user accounts
  - name: Product Variants
    description: APIs for managing product variants
  - name: Shopping Cart
    description: Shopping Cart management APIs
  paths:
    /users:
      get:
        tags:
        - Users
        summary: Get all users with optional filtering
        operationId: getAllUsers
        parameters:
        - name: page
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          example: 0
        - name: size
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          example: 10
        - name: sortBy
          in: query
          description: Field to sort the results by
          required: false
          schema:
            type: string
            default: id
          example: "email,firstName,lastName"
        - name: sortDirection
          in: query
          description: "Sorting direction: 1 for ascending, other values for descending"
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          example: 1
        - name: id
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: email
          in: query
          required: false
          schema:
            type: string
        - name: firstName
          in: query
          required: false
          schema:
            type: string
        - name: lastName
          in: query
          required: false
          schema:
            type: string
        - name: phoneNumber
          in: query
          required: false
          schema:
            type: string
        - name: expirationMinutes
          in: query
          description: Expiration time in minutes for signed URLs
          required: false
          schema:
            type: integer
            format: int32
            default: 60
          example: 60
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        responses:
          "200":
            description: OK
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageUser"
      put:
        tags:
        - Users
        summary: Update an existing user
        operationId: updateUser
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRequest"
          required: true
        responses:
          "200":
            description: User updated successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseUser"
          "404":
            description: User not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "400":
            description: Invalid input
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /shopping-cart/{shoppingCartId}:
      get:
        tags:
        - Shopping Cart
        summary: Get shopping cart by ID
        description: Retrieves a shopping cart by its ID
        operationId: getShoppingCartById
        parameters:
        - name: shoppingCartId
          in: path
          description: Shopping cart ID
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          description: Authorization token for signed URLs
          required: false
          schema:
            type: string
        - name: expirationMinutes
          in: query
          description: Expiration time for signed URLs in minutes
          required: false
          schema:
            type: integer
            format: int32
        responses:
          "200":
            description: Shopping cart retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
          "404":
            description: Shopping cart not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
      put:
        tags:
        - Shopping Cart
        summary: Update a shopping cart
        description: Updates an existing shopping cart
        operationId: updateShoppingCart
        parameters:
        - name: shoppingCartId
          in: path
          description: Shopping cart ID
          required: true
          schema:
            type: integer
            format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShoppingCartRequest"
          required: true
        responses:
          "200":
            description: Shopping cart updated successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
          "400":
            description: Invalid request data
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
          "404":
            description: Shopping cart not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
      delete:
        tags:
        - Shopping Cart
        summary: Delete shopping cart
        description: Permanently deletes a shopping cart
        operationId: deleteShoppingCart
        parameters:
        - name: shoppingCartId
          in: path
          description: Shopping cart ID
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Shopping cart deleted successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "404":
            description: Shopping cart not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
    /shopping-cart-item/{shoppingCartId}/cart-item/{cartItemId}:
      put:
        tags:
        - Shopping Cart Item
        summary: Update a cart item
        description: Updates an existing cart item
        operationId: updateCartItem
        parameters:
        - name: cartItemId
          in: path
          description: Cart item ID
          required: true
          schema:
            type: integer
            format: int64
        - name: shoppingCartId
          in: path
          description: Cart ID
          required: true
          schema:
            type: integer
            format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItemRequest"
          required: true
        responses:
          "200":
            description: Cart item updated successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseCartItem"
          "400":
            description: Invalid request data
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseCartItem"
          "404":
            description: Cart item not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseCartItem"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseCartItem"
      delete:
        tags:
        - Shopping Cart Item
        summary: Delete cart item
        description: Removes a cart item from the shopping cart
        operationId: deleteCartItem
        parameters:
        - name: cartItemId
          in: path
          description: Cart item ID
          required: true
          schema:
            type: integer
            format: int64
        - name: shoppingCartId
          in: path
          description: Shopping cart ID
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Cart item deleted successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "404":
            description: Cart item not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
    /product:
      get:
        tags:
        - Product
        operationId: getAllProducts
        parameters:
        - name: page
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          example: 0
        - name: size
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          example: 10
        - name: sortBy
          in: query
          description: Field to sort the results by
          required: false
          schema:
            type: string
            default: "productName,instrument"
          example: "productName,instrument"
        - name: sortDirection
          in: query
          description: "Sorting direction: 1 for ascending, other values for descending"
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          example: 1
        - name: productName
          in: query
          required: false
          schema:
            type: string
        - name: description
          in: query
          required: false
          schema:
            type: string
        - name: instrument
          in: query
          required: false
          schema:
            type: string
        - name: tone
          in: query
          required: false
          schema:
            type: string
        - name: categoryId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: categoryName
          in: query
          required: false
          schema:
            type: string
        - name: enabled
          in: query
          required: false
          schema:
            type: boolean
        - name: productId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: isMainImage
          in: query
          required: false
          schema:
            type: boolean
            default: true
        - name: Authorization
          in: header
          description: Authorization token for signed URLs
          required: false
          schema:
            type: string
          example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        - name: expirationMinutes
          in: query
          description: Expiration time in minutes for signed URLs
          required: false
          schema:
            type: integer
            format: int32
            default: 60
          example: 60
        responses:
          "200":
            description: OK
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageProduct"
      put:
        tags:
        - Product
        operationId: updateProduct
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductRequest"
          required: true
        responses:
          "200":
            description: OK
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseProduct"
      post:
        tags:
        - Product
        operationId: createProduct
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductRequest"
          required: true
        responses:
          "200":
            description: OK
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseProduct"
    /product/variants:
      get:
        tags:
        - Product Variants
        summary: Get all product variants with optional filtering
        operationId: getAllProductVariants
        parameters:
        - name: page
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          example: 0
        - name: size
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          example: 10
        - name: sortBy
          in: query
          description: Field to sort the results by
          required: false
          schema:
            type: string
            default: sku
          example: sku
        - name: sortDirection
          in: query
          description: "Sorting direction: 1 for ascending, other values for descending"
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          example: 1
        - name: sku
          in: query
          required: false
          schema:
            type: string
        - name: minPrice
          in: query
          required: false
          schema:
            type: number
            format: double
        - name: maxPrice
          in: query
          required: false
          schema:
            type: number
            format: double
        - name: minStock
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: enabled
          in: query
          required: false
          schema:
            type: boolean
        - name: productId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: variantId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: hasSalePrice
          in: query
          required: false
          schema:
            type: boolean
        responses:
          "200":
            description: OK
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageProductVariant"
      put:
        tags:
        - Product Variants
        summary: Update an existing product variant
        operationId: updateProductVariant
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductVariantRequest"
          required: true
        responses:
          "200":
            description: Product variant updated successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseProductVariant"
          "404":
            description: Product variant not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "400":
            description: Invalid input
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
      post:
        tags:
        - Product Variants
        summary: Create a new product variant
        operationId: createProductVariant
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductVariantRequest"
          required: true
        responses:
          "201":
            description: Product variant created successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseProductVariant"
          "400":
            description: Invalid input
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /product/media:
      get:
        tags:
        - Product Media
        summary: Get all product media with optional filtering and signed URLs
        operationId: getAllProductMedia
        parameters:
        - name: page
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          example: 0
        - name: size
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          example: 10
        - name: sortBy
          in: query
          description: Field to sort the results by
          required: false
          schema:
            type: string
            default: sortOrder
          example: sortOrder
        - name: sortDirection
          in: query
          description: "Sorting direction: 1 for ascending, other values for descending"
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          example: 1
        - name: mediaType
          in: query
          required: false
          schema:
            type: string
        - name: storageProvider
          in: query
          required: false
          schema:
            type: string
        - name: mediaUrl
          in: query
          required: false
          schema:
            type: string
        - name: mediaPath
          in: query
          required: false
          schema:
            type: string
        - name: externalId
          in: query
          required: false
          schema:
            type: string
        - name: altText
          in: query
          required: false
          schema:
            type: string
        - name: isPrimary
          in: query
          required: false
          schema:
            type: boolean
        - name: productId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: mediaId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: minSortOrder
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: withSignedUrls
          in: query
          description: Whether to return signed URLs for media files
          required: false
          schema:
            type: boolean
            default: false
          example: true
        - name: expirationMinutes
          in: query
          description: Expiration time for signed URLs in minutes
          required: false
          schema:
            type: integer
            format: int32
            default: 1440
          example: 1440
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        responses:
          "200":
            description: OK
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageProductMedia"
      put:
        tags:
        - Product Media
        summary: Update an existing product media record
        operationId: updateProductMedia
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductMediaRequest"
          required: true
        responses:
          "200":
            description: Product media updated successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseProductMedia"
          "404":
            description: Product media not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "400":
            description: Invalid input
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
      post:
        tags:
        - Product Media
        summary: Create a new product media record
        operationId: createProductMedia
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductMediaRequest"
          required: true
        responses:
          "201":
            description: Product media created successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseProductMedia"
          "400":
            description: Invalid input
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /orders/{orderId}:
      get:
        tags:
        - Orders
        summary: Get order by ID
        description: Retrieves a specific order by its ID
        operationId: getOrderById
        parameters:
        - name: orderId
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Order retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "404":
            description: Order not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
      put:
        tags:
        - Orders
        summary: Update order
        description: Updates an existing order
        operationId: updateOrder
        parameters:
        - name: orderId
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderRequest"
          required: true
        responses:
          "200":
            description: Order updated successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "400":
            description: Invalid request data
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "404":
            description: Order not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
      delete:
        tags:
        - Orders
        summary: Delete order
        description: Deletes an order (admin only)
        operationId: deleteOrder
        parameters:
        - name: orderId
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Order deleted successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "404":
            description: Order not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "400":
            description: Order cannot be deleted
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
    /category:
      get:
        tags:
        - Category
        summary: Get all categories with optional filtering
        operationId: getAllCategories
        parameters:
        - name: page
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          example: 0
        - name: size
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          example: 10
        - name: sortBy
          in: query
          description: Field to sort the results by
          required: false
          schema:
            type: string
            default: "categoryName,id"
          example: "categoryName,id"
        - name: sortDirection
          in: query
          description: "Sorting direction: 1 for ascending, other values for descending"
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          example: 1
        - name: categoryName
          in: query
          required: false
          schema:
            type: string
        - name: description
          in: query
          required: false
          schema:
            type: string
        - name: imageUrl
          in: query
          required: false
          schema:
            type: string
        - name: enabled
          in: query
          required: false
          schema:
            type: boolean
            default: true
        - name: categoryId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: expirationMinutes
          in: query
          description: Expiration time in minutes for signed URLs
          required: false
          schema:
            type: integer
            format: int32
            default: 60
          example: 60
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        responses:
          "200":
            description: OK
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageCategory"
      put:
        tags:
        - Category
        summary: Update an existing category
        operationId: updateCategory
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryRequest"
          required: true
        responses:
          "200":
            description: Category updated successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseCategory"
          "404":
            description: Category not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "400":
            description: Invalid input
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
      post:
        tags:
        - Category
        summary: Create a new category
        operationId: createCategory
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryRequest"
          required: true
        responses:
          "201":
            description: Category created successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseCategory"
          "400":
            description: Invalid input
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /banner:
      get:
        tags:
        - Banner
        summary: Get all banners
        description: Returns all available banners
        operationId: getAllBanners
        parameters:
        - name: page
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          example: 0
        - name: size
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          example: 10
        - name: sortBy
          in: query
          description: Field to sort the results by
          required: false
          schema:
            type: string
            default: "sortOrder,title"
          example: "title,sortOrder"
        - name: sortDirection
          in: query
          description: "Sorting direction: 1 for ascending, other values for descending"
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          example: 1
        - name: title
          in: query
          required: false
          schema:
            type: string
        - name: subtitle
          in: query
          required: false
          schema:
            type: string
        - name: imageUrl
          in: query
          required: false
          schema:
            type: string
        - name: actionText
          in: query
          required: false
          schema:
            type: string
        - name: isActive
          in: query
          required: false
          schema:
            type: boolean
            default: true
        - name: bannerId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: startDateFrom
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: startDateTo
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: endDateFrom
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: endDateTo
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: expirationMinutes
          in: query
          description: Expiration time in minutes for signed URLs
          required: false
          schema:
            type: integer
            format: int32
            default: 60
          example: 60
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        responses:
          "200":
            description: OK
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageBanner"
        security:
        - bearerAuth: []
        x-roles:
          roles: "Admin,Customer,Anonymous"
      put:
        tags:
        - Banner
        summary: Update an existing banner
        operationId: updateBanner
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BannerRequest"
          required: true
        responses:
          "200":
            description: Banner updated successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseBanner"
          "404":
            description: Banner not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "400":
            description: Invalid input
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
      post:
        tags:
        - Banner
        summary: Create a new banner
        operationId: createBanner
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BannerRequest"
          required: true
        responses:
          "201":
            description: Banner created successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseBanner"
          "400":
            description: Invalid input
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /users/{userId}/upload-avatar:
      post:
        tags:
        - Users
        summary: Upload an avatar image for a user
        operationId: uploadAvatar
        parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        requestBody:
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
                required:
                - file
        responses:
          "200":
            description: Avatar uploaded successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseUser"
          "400":
            description: Invalid input
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "404":
            description: User not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /users/signup:
      post:
        tags:
        - Users
        summary: Register a new user
        operationId: signup
        parameters:
        - name: api-key
          in: header
          required: false
          schema:
            type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRequest"
          required: true
        responses:
          "201":
            description: User created successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseUser"
          "400":
            description: Invalid input
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /shopping-cart:
      get:
        tags:
        - Shopping Cart
        summary: Get all shopping carts
        description: Retrieves all shopping carts with pagination and filtering
        operationId: getAllShoppingCarts
        parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            default: id
        - name: sortDir
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: Authorization
          in: header
          description: Authorization token for signed URLs
          required: false
          schema:
            type: string
        - name: expirationMinutes
          in: query
          description: Expiration time for signed URLs in minutes
          required: false
          schema:
            type: integer
            format: int32
        - name: searchCriteria
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/ShoppingCartSearchCriteria"
        responses:
          "200":
            description: Shopping carts retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageShoppingCart"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageShoppingCart"
      post:
        tags:
        - Shopping Cart
        summary: Create a new shopping cart
        description: Creates a new shopping cart for a user
        operationId: createShoppingCart
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShoppingCartRequest"
          required: true
        responses:
          "201":
            description: Shopping cart created successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
          "400":
            description: Invalid request data
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
          "500":
            description: Internal server error
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
    /shopping-cart/{shoppingCartId}/update-totals:
      post:
        tags:
        - Shopping Cart
        summary: Update cart totals
        description: Recalculates and updates the cart totals
        operationId: updateCartTotals
        parameters:
        - name: shoppingCartId
          in: path
          description: Shopping cart ID
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Cart totals updated successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
          "404":
            description: Shopping cart not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
    /shopping-cart/{shoppingCartId}/clear:
      post:
        tags:
        - Shopping Cart
        summary: Clear shopping cart
        description: Removes all items from the shopping cart
        operationId: clearShoppingCart
        parameters:
        - name: shoppingCartId
          in: path
          description: Shopping cart ID
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Shopping cart cleared successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "404":
            description: Shopping cart not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
    /shopping-cart-item/{shoppingCartId}/cart-item:
      post:
        tags:
        - Shopping Cart Item
        summary: Create a new cart item
        description: Adds a new item to a shopping cart
        operationId: createCartItem
        parameters:
        - name: shoppingCartId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItemRequest"
          required: true
        responses:
          "201":
            description: Cart item created successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseCartItem"
          "400":
            description: Invalid request data
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseCartItem"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseCartItem"
          "500":
            description: Internal server error
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseCartItem"
    /product/media/upload/{productId}:
      post:
        tags:
        - Product Media
        summary: Upload a media file for a product
        operationId: uploadMedia
        parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: mediaType
          in: query
          required: true
          schema:
            type: string
        - name: storageProvider
          in: query
          required: true
          schema:
            type: string
        - name: altText
          in: query
          required: false
          schema:
            type: string
        - name: isPrimary
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: sortOrder
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        requestBody:
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
                required:
                - file
        responses:
          "201":
            description: Media uploaded successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "400":
            description: Invalid input
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "404":
            description: Product not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /product/images/upload/{productId}:
      post:
        tags:
        - Product Images
        summary: Upload an image for a product
        operationId: uploadImage
        parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: isMain
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        requestBody:
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
                required:
                - file
        responses:
          "201":
            description: Images uploaded successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageProductImage"
          "400":
            description: Invalid input
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "404":
            description: Product not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /payments/webhook:
      post:
        tags:
        - Payments
        summary: Process Stripe webhook
        description: Handles webhook events from Stripe
        operationId: processWebhook
        parameters:
        - name: Stripe-Signature
          in: header
          required: true
          schema:
            type: string
        requestBody:
          content:
            application/json:
              schema:
                type: string
          required: true
        responses:
          "200":
            description: Webhook processed successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseString"
          "400":
            description: Invalid webhook
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseString"
          "500":
            description: Webhook processing error
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseString"
    /payments/refund:
      post:
        tags:
        - Payments
        summary: Process payment refund
        description: Processes a refund for a successful payment
        operationId: processRefund
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentRefundRequest"
          required: true
        responses:
          "200":
            description: Refund processed successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "400":
            description: Invalid request or payment cannot be refunded
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "404":
            description: Payment not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "500":
            description: Refund processing error
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
    /payments/confirm:
      post:
        tags:
        - Payments
        summary: Confirm payment
        description: Confirms a payment with Stripe using payment method
        operationId: confirmPayment
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentConfirmRequest"
          required: true
        responses:
          "200":
            description: Payment confirmed successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "400":
            description: Invalid request or payment cannot be confirmed
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "404":
            description: Payment not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "500":
            description: Payment processing error
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
    /payments/checkout:
      post:
        tags:
        - Payments
        summary: Create payment checkout session
        description: Creates a Stripe Payment Intent for processing payment
        operationId: createCheckout
        parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentCheckoutRequest"
          required: true
        responses:
          "201":
            description: Payment checkout created successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentCheckoutResponse"
          "400":
            description: Invalid request data
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "404":
            description: Shopping cart not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "409":
            description: Cart already has successful payment
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentCheckoutResponse"
          "500":
            description: Payment processing error
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentCheckoutResponse"
    /orders:
      post:
        tags:
        - Orders
        summary: Create a new order
        description: Creates a new order from order request
        operationId: createOrder
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderRequest"
          required: true
        responses:
          "201":
            description: Order created successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "400":
            description: Invalid request data
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "404":
            description: User or payment not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "409":
            description: Order already exists for payment
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "500":
            description: Order processing error
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
    /category/upload/{categoryId}:
      post:
        tags:
        - Category
        summary: Upload an image for a category
        operationId: uploadImage_1
        parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        requestBody:
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
                required:
                - file
        responses:
          "200":
            description: Image uploaded successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseCategory"
          "400":
            description: Invalid input
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "404":
            description: Category not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /banner/upload/{bannerId}:
      post:
        tags:
        - Banner
        summary: Upload an image for a banner
        operationId: uploadImage_2
        parameters:
        - name: bannerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        requestBody:
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
                required:
                - file
        responses:
          "200":
            description: Image uploaded successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseBanner"
          "400":
            description: Invalid input
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "404":
            description: Banner not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /auth/token:
      post:
        tags:
        - Authentication
        summary: Get anonymous token
        description: Obtains an anonymous access token from Keycloak
        operationId: getToken
        parameters:
        - name: api-key
          in: header
          required: false
          schema:
            type: string
        responses:
          "200":
            description: Token successfully retrieved
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/TokenResponse"
          "429":
            description: Too many requests
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "500":
            description: Internal server error
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /auth/password-reset/verify-otp:
      post:
        tags:
        - Authentication
        summary: Verify OTP for password reset
        description: Verifies the OTP entered by the user and returns a reset token
          on success
        operationId: verifyOtp
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OtpRequest"
          required: true
        responses:
          "200":
            description: OTP verified successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/OtpVerificationResponse"
          "400":
            description: Invalid OTP or verification failed
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "500":
            description: Internal server error
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /auth/password-reset/send-otp:
      post:
        tags:
        - Authentication
        summary: Send OTP for password reset
        description: Sends a 6-digit OTP to the user's email for password reset verification
        operationId: sendOtp
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OtpRequest"
          required: true
        responses:
          "200":
            description: OTP sent successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/OtpVerificationResponse"
          "404":
            description: User with email not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
          "500":
            description: Internal server error
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /orders/{orderId}/process:
      patch:
        tags:
        - Orders
        summary: Mark order as processing
        description: Marks an order as processing
        operationId: markOrderAsProcessing
        parameters:
        - name: orderId
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Order marked as processing successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "404":
            description: Order not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
    /orders/{orderId}/complete:
      patch:
        tags:
        - Orders
        summary: Mark order as completed
        description: Marks an order as completed
        operationId: markOrderAsCompleted
        parameters:
        - name: orderId
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Order marked as completed successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "404":
            description: Order not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "400":
            description: Order cannot be completed
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
    /orders/{orderId}/cancel:
      patch:
        tags:
        - Orders
        summary: Cancel order
        description: Cancels an order
        operationId: cancelOrder
        parameters:
        - name: orderId
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Order cancelled successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "404":
            description: Order not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "400":
            description: Order cannot be cancelled
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
    /users/{id}:
      get:
        tags:
        - Users
        summary: Get a user by ID
        operationId: getUserById
        parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: expirationMinutes
          in: query
          description: Expiration time in minutes for signed URLs
          required: false
          schema:
            type: integer
            format: int32
            default: 60
          example: 60
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        responses:
          "200":
            description: User found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseUser"
          "404":
            description: User not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
      delete:
        tags:
        - Users
        summary: Delete a user
        operationId: deleteUser
        parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: User deleted successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "404":
            description: User not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /users/info:
      get:
        tags:
        - Users
        summary: Get user info from token
        operationId: getUserInfo
        parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: expirationMinutes
          in: query
          description: Expiration time in minutes for signed URLs
          required: false
          schema:
            type: integer
            format: int32
            default: 60
          example: 60
        responses:
          "200":
            description: User found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseUser"
          "404":
            description: User not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /shopping-cart/user/{userId}:
      get:
        tags:
        - Shopping Cart
        summary: Get shopping carts by user ID
        description: Retrieves all shopping carts for a specific user
        operationId: getShoppingCartsByUserId
        parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: Authorization
          in: header
          description: Authorization token for signed URLs
          required: false
          schema:
            type: string
        - name: expirationMinutes
          in: query
          description: Expiration time for signed URLs in minutes
          required: false
          schema:
            type: integer
            format: int32
        responses:
          "200":
            description: User shopping carts retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageShoppingCart"
          "404":
            description: User not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageShoppingCart"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageShoppingCart"
    /shopping-cart/user/{userId}/active:
      get:
        tags:
        - Shopping Cart
        summary: Get active shopping cart by user ID
        description: Retrieves the active shopping cart for a specific user
        operationId: getActiveShoppingCartByUserId
        parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          description: Authorization token for signed URLs
          required: false
          schema:
            type: string
        - name: expirationMinutes
          in: query
          description: Expiration time for signed URLs in minutes
          required: false
          schema:
            type: integer
            format: int32
        responses:
          "200":
            description: Active shopping cart retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
          "404":
            description: User not found or no active cart
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseShoppingCart"
    /product/{id}:
      get:
        tags:
        - Product
        operationId: getProductById
        parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: OK
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseProduct"
      delete:
        tags:
        - Product
        operationId: deleteProduct
        parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: OK
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
    /product/variants/{id}:
      get:
        tags:
        - Product Variants
        summary: Get a product variant by ID
        operationId: getProductVariantById
        parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Product variant found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseProductVariant"
          "404":
            description: Product variant not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
      delete:
        tags:
        - Product Variants
        summary: Delete a product variant
        operationId: deleteProductVariant
        parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Product variant deleted successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "404":
            description: Product variant not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /product/purchased:
      get:
        tags:
        - Product
        summary: Get products purchased by the authenticated customer
        description: "Returns a paginated list of products that the customer has purchased.\
          \ Supports filtering by product name, category, and asset type. The user ID\
          \ is extracted from the JWT token."
        operationId: getPurchasedProducts
        parameters:
        - name: page
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          example: 0
        - name: size
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          example: 10
        - name: sortBy
          in: query
          description: Field to sort the results by
          required: false
          schema:
            type: string
            default: productName
          example: productName
        - name: sortDirection
          in: query
          description: "Sorting direction: 1 for ascending, other values for descending"
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          example: 1
        - name: productName
          in: query
          description: Filter by product name (partial match)
          required: false
          schema:
            type: string
          example: guitar
        - name: category
          in: query
          description: Filter by category name (partial match)
          required: false
          schema:
            type: string
          example: instruments
        - name: assetType
          in: query
          description: Filter by product asset type (partial match)
          required: false
          schema:
            type: string
          example: audio
        - name: Authorization
          in: header
          description: Authorization token for signed URLs
          required: false
          schema:
            type: string
          example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        - name: expirationMinutes
          in: query
          description: Expiration time in minutes for signed URLs
          required: false
          schema:
            type: integer
            format: int32
            default: 60
          example: 60
        responses:
          "200":
            description: Products retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageProduct"
          "401":
            description: Unauthorized - Invalid or missing JWT token
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageProduct"
          "500":
            description: Internal server error
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageProduct"
    /product/media/{id}:
      get:
        tags:
        - Product Media
        summary: Get a product media by ID with optional signed URLs
        operationId: getProductMediaById
        parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: withSignedUrls
          in: query
          description: Whether to return signed URLs for media files
          required: false
          schema:
            type: boolean
            default: false
          example: true
        - name: expirationMinutes
          in: query
          description: Expiration time for signed URLs in minutes
          required: false
          schema:
            type: integer
            format: int32
            default: 1440
          example: 1440
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        responses:
          "200":
            description: Product media found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseProductMedia"
          "404":
            description: Product media not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /product/images:
      get:
        tags:
        - Product Images
        summary: Get all product images with optional filtering
        operationId: getAllProductImages
        parameters:
        - name: page
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          example: 0
        - name: size
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          example: 10
        - name: sortBy
          in: query
          description: Field to sort the results by
          required: false
          schema:
            type: string
            default: originalName
          example: originalName
        - name: sortDirection
          in: query
          description: "Sorting direction: 1 for ascending, other values for descending"
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          example: 1
        - name: imageUrl
          in: query
          required: false
          schema:
            type: string
        - name: originalName
          in: query
          required: false
          schema:
            type: string
        - name: imageType
          in: query
          required: false
          schema:
            type: string
        - name: isMain
          in: query
          required: false
          schema:
            type: boolean
        - name: productId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: imageId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: OK
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageProductImage"
    /payments/{paymentId}:
      get:
        tags:
        - Payments
        summary: Get payment by ID
        description: Retrieves payment details by ID
        operationId: getPaymentById
        parameters:
        - name: paymentId
          in: path
          description: Payment ID
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Payment found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "404":
            description: Payment not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
    /payments/uuid/{uuid}:
      get:
        tags:
        - Payments
        summary: Get payment by UUID
        description: Retrieves payment details by UUID
        operationId: getPaymentByUuid
        parameters:
        - name: uuid
          in: path
          description: Payment UUID
          required: true
          schema:
            type: string
            format: uuid
        responses:
          "200":
            description: Payment found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "404":
            description: Payment not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
    /payments/user/my-payments:
      get:
        tags:
        - Payments
        summary: Get user's payments
        description: Retrieves all payments for the authenticated user
        operationId: getUserPayments
        parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            default: createdAt
        - name: sortDirection
          in: query
          required: false
          schema:
            type: string
            default: desc
        - name: status
          in: query
          required: false
          schema:
            type: string
        - name: currency
          in: query
          required: false
          schema:
            type: string
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        responses:
          "200":
            description: Payments retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePagePaymentResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePagePaymentResponse"
    /payments/stripe/{paymentIntentId}:
      get:
        tags:
        - Payments
        summary: Get payment by Stripe Payment Intent ID
        description: Retrieves payment details by Stripe Payment Intent ID
        operationId: getPaymentByStripeId
        parameters:
        - name: paymentIntentId
          in: path
          description: Stripe Payment Intent ID
          required: true
          schema:
            type: string
        responses:
          "200":
            description: Payment found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "404":
            description: Payment not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
    /payments/cart/{cartId}:
      get:
        tags:
        - Payments
        summary: Get cart payments
        description: Retrieves all payments for a shopping cart
        operationId: getCartPayments
        parameters:
        - name: cartId
          in: path
          description: Shopping cart ID
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Cart payments retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseListPaymentResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseListPaymentResponse"
    /payments/admin/statistics:
      get:
        tags:
        - Payments
        summary: Get payment statistics (Admin)
        description: Retrieves payment statistics for admin dashboard
        operationId: getPaymentStatistics
        responses:
          "200":
            description: Statistics retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentStatistics"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentStatistics"
          "403":
            description: Forbidden
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentStatistics"
    /payments/admin/all:
      get:
        tags:
        - Payments
        summary: Get all payments (Admin)
        description: Retrieves all payments with advanced filtering (Admin only)
        operationId: getAllPayments
        parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            default: createdAt
        - name: sortDirection
          in: query
          required: false
          schema:
            type: string
            default: desc
        - name: userId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          required: false
          schema:
            type: string
        - name: currency
          in: query
          required: false
          schema:
            type: string
        - name: paymentMethodType
          in: query
          required: false
          schema:
            type: string
        responses:
          "200":
            description: Payments retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePagePaymentResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePagePaymentResponse"
          "403":
            description: Forbidden
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePagePaymentResponse"
    /orders/user:
      get:
        tags:
        - Orders
        summary: Get orders by user
        description: Retrieves orders for a specific user
        operationId: getOrdersByUser
        parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            format: int32
            default: 20
        responses:
          "200":
            description: Orders retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageOrderResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageOrderResponse"
    /orders/status/{status}:
      get:
        tags:
        - Orders
        summary: Get orders by status
        description: Retrieves orders with specific status
        operationId: getOrdersByStatus
        parameters:
        - name: status
          in: path
          description: Order status
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            format: int32
            default: 20
        responses:
          "200":
            description: Orders retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageOrderResponse"
          "400":
            description: Invalid status
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageOrderResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageOrderResponse"
    /orders/payment/{paymentId}:
      get:
        tags:
        - Orders
        summary: Get order by payment ID
        description: Retrieves order associated with a payment
        operationId: getOrderByPaymentId
        parameters:
        - name: paymentId
          in: path
          description: Payment ID
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Order retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "404":
            description: Order not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
    /orders/number/{orderNumber}:
      get:
        tags:
        - Orders
        summary: Get order by order number
        description: Retrieves a specific order by its order number
        operationId: getOrderByOrderNumber
        parameters:
        - name: orderNumber
          in: path
          description: Order number
          required: true
          schema:
            type: string
        responses:
          "200":
            description: Order retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "404":
            description: Order not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseOrderResponse"
    /orders/my-orders:
      get:
        tags:
        - Orders
        summary: Get current user's orders
        description: Retrieves orders for the currently authenticated user
        operationId: getMyOrders
        parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        responses:
          "200":
            description: Orders retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageOrderResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageOrderResponse"
    /orders/all:
      get:
        tags:
        - Orders
        summary: Get all orders
        description: Retrieves all orders with pagination and filtering
        operationId: getAllOrders
        parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: sortBy
          in: query
          description: Sort by field
          required: false
          schema:
            type: string
            default: createdAt
        - name: sortDirection
          in: query
          description: Sort direction
          required: false
          schema:
            type: string
            default: DESC
        - name: userId
          in: query
          description: User ID filter
          required: false
          schema:
            type: integer
            format: int64
        - name: orderNumber
          in: query
          description: Order number filter
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Status filter
          required: false
          schema:
            type: string
        - name: minAmount
          in: query
          description: Minimum amount filter
          required: false
          schema:
            type: number
        - name: maxAmount
          in: query
          description: Maximum amount filter
          required: false
          schema:
            type: number
        - name: createdAfter
          in: query
          description: Created after filter
          required: false
          schema:
            type: string
            format: date-time
        - name: createdBefore
          in: query
          description: Created before filter
          required: false
          schema:
            type: string
            format: date-time
        - name: customerEmail
          in: query
          description: Customer email filter
          required: false
          schema:
            type: string
        responses:
          "200":
            description: Orders retrieved successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageOrderResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePageOrderResponse"
    /category/{id}:
      get:
        tags:
        - Category
        summary: Get a category by ID
        operationId: getCategoryById
        parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Category found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseCategory"
          "404":
            description: Category not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
      delete:
        tags:
        - Category
        summary: Delete a category
        operationId: deleteCategory
        parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Category deleted successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "404":
            description: Category not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /banner/{id}:
      get:
        tags:
        - Banner
        summary: Get a banner by ID
        operationId: getBannerById
        parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Banner found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseBanner"
          "404":
            description: Banner not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
      delete:
        tags:
        - Banner
        summary: Delete a banner
        operationId: deleteBanner
        parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Banner deleted successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "404":
            description: Banner not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /shopping-cart-item/cart-item/{cartItemId}:
      delete:
        tags:
        - Shopping Cart Item
        summary: Delete cart item
        description: Removes a cart item from the shopping cart
        operationId: deleteCartItemById
        parameters:
        - name: cartItemId
          in: path
          description: Cart item ID
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Cart item deleted successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "404":
            description: Cart item not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
    /product/media/{mediaId}:
      delete:
        tags:
        - Product Media
        summary: Delete a product media
        operationId: deleteMedia
        parameters:
        - name: mediaId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        responses:
          "200":
            description: Media deleted successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "404":
            description: Media not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /product/images/{imageId}:
      delete:
        tags:
        - Product Images
        summary: Delete a product image
        operationId: deleteImage
        parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        responses:
          "200":
            description: Image deleted successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponseVoid"
          "404":
            description: Image not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponse"
    /payments/{paymentId}/cancel:
      delete:
        tags:
        - Payments
        summary: Cancel payment
        description: Cancels a pending payment
        operationId: cancelPayment
        parameters:
        - name: paymentId
          in: path
          description: Payment ID
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: Payment canceled successfully
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "400":
            description: Payment cannot be canceled
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "404":
            description: Payment not found
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
          "401":
            description: Unauthorized
            content:
              '*/*':
                schema:
                  $ref: "#/components/schemas/DefaultResponsePaymentResponse"
  components:
    schemas:
      DefaultResponse:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            type: object
      UserRequest:
        type: object
        properties:
          id:
            type: integer
            format: int64
          email:
            type: string
            maxLength: 100
            minLength: 0
          firstName:
            type: string
            maxLength: 50
            minLength: 0
          lastName:
            type: string
            maxLength: 50
            minLength: 0
          phoneNumber:
            type: string
            maxLength: 20
            minLength: 0
          avatarUrl:
            type: string
            maxLength: 255
            minLength: 0
          enabled:
            type: boolean
          password:
            type: string
            maxLength: 2147483647
            minLength: 6
        required:
        - email
        - firstName
        - lastName
      DefaultResponseUser:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/User"
      User:
        type: object
        properties:
          id:
            type: integer
            format: int64
          uuid:
            type: string
            format: uuid
          email:
            type: string
          firstName:
            type: string
          lastName:
            type: string
          phoneNumber:
            type: string
          avatarUrl:
            type: string
          enabled:
            type: boolean
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          lastLogin:
            type: string
            format: date-time
      ShoppingCartRequest:
        type: object
        properties:
          id:
            type: integer
            format: int64
          userId:
            type: integer
            format: int64
          totalPrice:
            type: number
          status:
            type: string
          notes:
            type: string
        required:
        - userId
      CartItem:
        type: object
        properties:
          id:
            type: integer
            format: int64
          product:
            $ref: "#/components/schemas/Product"
          productVariant:
            $ref: "#/components/schemas/ProductVariant"
          quantity:
            type: integer
            format: int32
          unitPrice:
            type: number
          discountPrice:
            type: number
          subtotal:
            type: number
          specialOfferId:
            type: integer
            format: int64
          discountAmount:
            type: number
          notes:
            type: string
            maxLength: 500
            minLength: 0
          addedAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
        required:
        - product
        - quantity
        - subtotal
        - unitPrice
      Category:
        type: object
        properties:
          id:
            type: integer
            format: int64
          categoryName:
            type: string
            maxLength: 30
            minLength: 0
          description:
            type: string
            maxLength: 150
            minLength: 0
          imageUrl:
            type: string
            maxLength: 255
            minLength: 0
          enabled:
            type: boolean
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
        required:
        - categoryName
        - description
      DefaultResponseShoppingCart:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/ShoppingCart"
      Product:
        type: object
        properties:
          id:
            type: integer
            format: int64
          productName:
            type: string
            maxLength: 30
            minLength: 0
          description:
            type: string
            maxLength: 150
            minLength: 0
          instrument:
            type: string
            maxLength: 30
            minLength: 0
          tone:
            type: string
            maxLength: 30
            minLength: 0
          enabled:
            type: boolean
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          category:
            $ref: "#/components/schemas/Category"
          media:
            type: array
            items:
              $ref: "#/components/schemas/ProductMedia"
          productAsset:
            $ref: "#/components/schemas/ProductAsset"
          writtenBy:
            type: string
            maxLength: 50
            minLength: 0
          interpreter:
            type: string
            maxLength: 50
            minLength: 0
        required:
        - category
        - description
        - productAsset
        - productName
      ProductAsset:
        type: object
        properties:
          id:
            type: integer
            format: int64
          assetType:
            type: string
            maxLength: 20
            minLength: 0
        required:
        - assetType
      ProductMedia:
        type: object
        properties:
          id:
            type: integer
            format: int64
          mediaType:
            type: string
            maxLength: 20
            minLength: 0
          storageProvider:
            type: string
            maxLength: 20
            minLength: 0
          mediaUrl:
            type: string
            maxLength: 255
            minLength: 0
          mediaPath:
            type: string
            maxLength: 255
            minLength: 0
          externalId:
            type: string
            maxLength: 100
            minLength: 0
          thumbnailUrl:
            type: string
            maxLength: 255
            minLength: 0
          altText:
            type: string
            maxLength: 100
            minLength: 0
          sortOrder:
            type: integer
            format: int32
          isPrimary:
            type: boolean
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
        required:
        - mediaType
        - mediaUrl
        - storageProvider
      ProductVariant:
        type: object
        properties:
          id:
            type: integer
            format: int64
          sku:
            type: string
            maxLength: 50
            minLength: 0
          price:
            type: number
          salePrice:
            type: number
          stock:
            type: integer
            format: int32
          enabled:
            type: boolean
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
        required:
        - price
        - sku
      ShoppingCart:
        type: object
        properties:
          id:
            type: integer
            format: int64
          totalAmount:
            type: number
          status:
            type: string
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          cartItems:
            type: array
            items:
              $ref: "#/components/schemas/CartItem"
      CartItemRequest:
        type: object
        properties:
          id:
            type: integer
            format: int64
          productId:
            type: integer
            format: int64
          productVariantId:
            type: integer
            format: int64
          quantity:
            type: integer
            format: int32
            minimum: 1
          unitPrice:
            type: number
            minimum: 0
          totalPrice:
            type: number
          notes:
            type: string
        required:
        - productId
        - quantity
        - unitPrice
      DefaultResponseCartItem:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/CartItem"
      ProductRequest:
        type: object
        properties:
          id:
            type: integer
            format: int64
          productName:
            type: string
          description:
            type: string
          instrument:
            type: string
          tone:
            type: string
          enabled:
            type: boolean
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          category:
            $ref: "#/components/schemas/Category"
          productAsset:
            $ref: "#/components/schemas/ProductAsset"
          writtenBy:
            type: string
          interpreter:
            type: string
      DefaultResponseProduct:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/Product"
      ProductVariantRequest:
        type: object
        properties:
          id:
            type: integer
            format: int64
          product:
            $ref: "#/components/schemas/Product"
          sku:
            type: string
            maxLength: 50
            minLength: 0
          price:
            type: number
          salePrice:
            type: number
          stock:
            type: integer
            format: int32
          enabled:
            type: boolean
        required:
        - price
        - product
        - sku
      DefaultResponseProductVariant:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/ProductVariant"
      ProductMediaRequest:
        type: object
        properties:
          id:
            type: integer
            format: int64
          product:
            $ref: "#/components/schemas/Product"
          mediaType:
            type: string
            maxLength: 20
            minLength: 0
          storageProvider:
            type: string
            maxLength: 20
            minLength: 0
          mediaUrl:
            type: string
            maxLength: 255
            minLength: 0
          mediaPath:
            type: string
            maxLength: 255
            minLength: 0
          externalId:
            type: string
            maxLength: 100
            minLength: 0
          thumbnailUrl:
            type: string
            maxLength: 255
            minLength: 0
          altText:
            type: string
            maxLength: 100
            minLength: 0
          sortOrder:
            type: integer
            format: int32
          isPrimary:
            type: boolean
        required:
        - mediaType
        - mediaUrl
        - product
        - storageProvider
      DefaultResponseProductMedia:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/ProductMedia"
      OrderRequest:
        type: object
        properties:
          userId:
            type: integer
            format: int64
          shoppingCartId:
            type: integer
            format: int64
          paymentId:
            type: integer
            format: int64
          shippingAddressId:
            type: integer
            format: int64
          billingAddressId:
            type: integer
            format: int64
          notes:
            type: string
            maxLength: 1000
            minLength: 0
          taxAmount:
            type: number
          shippingAmount:
            type: number
          discountAmount:
            type: number
        required:
        - paymentId
        - shoppingCartId
        - userId
      DefaultResponseOrderResponse:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/OrderResponse"
      OrderItemResponse:
        type: object
        properties:
          id:
            type: integer
            format: int64
          productVariantId:
            type: integer
            format: int64
          productName:
            type: string
          productSku:
            type: string
          productDescription:
            type: string
          quantity:
            type: integer
            format: int32
          unitPrice:
            type: number
          subtotal:
            type: number
          hasDiscount:
            type: boolean
          discountPerUnit:
            type: number
          totalDiscount:
            type: number
          createdAt:
            type: string
            format: date-time
      OrderResponse:
        type: object
        properties:
          id:
            type: integer
            format: int64
          orderNumber:
            type: string
          status:
            type: string
          userId:
            type: integer
            format: int64
          customerName:
            type: string
          customerEmail:
            type: string
          paymentId:
            type: integer
            format: int64
          paymentStatus:
            type: string
          shippingAddressId:
            type: integer
            format: int64
          billingAddressId:
            type: integer
            format: int64
          subtotal:
            type: number
          taxAmount:
            type: number
          shippingAmount:
            type: number
          discountAmount:
            type: number
          totalAmount:
            type: number
          notes:
            type: string
          itemCount:
            type: integer
            format: int32
          orderItems:
            type: array
            items:
              $ref: "#/components/schemas/OrderItemResponse"
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          completedAt:
            type: string
            format: date-time
      CategoryRequest:
        type: object
        properties:
          id:
            type: integer
            format: int64
          categoryName:
            type: string
            maxLength: 30
            minLength: 0
          description:
            type: string
            maxLength: 150
            minLength: 0
          imageUrl:
            type: string
            maxLength: 255
            minLength: 0
          enabled:
            type: boolean
          products:
            type: array
            items:
              $ref: "#/components/schemas/ProductRequest"
            uniqueItems: true
        required:
        - categoryName
        - description
      DefaultResponseCategory:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/Category"
      BannerRequest:
        type: object
        properties:
          id:
            type: integer
            format: int64
          title:
            type: string
            maxLength: 100
            minLength: 0
          subtitle:
            type: string
            maxLength: 200
            minLength: 0
          imageUrl:
            type: string
            maxLength: 255
            minLength: 0
          actionText:
            type: string
            maxLength: 50
            minLength: 0
          actionUrl:
            type: string
            maxLength: 255
            minLength: 0
          sortOrder:
            type: integer
            format: int32
          isActive:
            type: boolean
          startDate:
            type: string
            format: date-time
          endDate:
            type: string
            format: date-time
        required:
        - imageUrl
        - title
      Banner:
        type: object
        properties:
          id:
            type: integer
            format: int64
          title:
            type: string
            maxLength: 100
            minLength: 0
          subtitle:
            type: string
            maxLength: 200
            minLength: 0
          imageUrl:
            type: string
            maxLength: 255
            minLength: 0
          actionText:
            type: string
            maxLength: 50
            minLength: 0
          actionUrl:
            type: string
            maxLength: 255
            minLength: 0
          sortOrder:
            type: integer
            format: int32
          isActive:
            type: boolean
          startDate:
            type: string
            format: date-time
          endDate:
            type: string
            format: date-time
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
        required:
        - imageUrl
        - title
      DefaultResponseBanner:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/Banner"
      DefaultResponseVoid:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            type: object
      DefaultResponsePageProductImage:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/PageObject"
      PageObject:
        type: object
        properties:
          totalPages:
            type: integer
            format: int32
          totalElements:
            type: integer
            format: int64
          first:
            type: boolean
          last:
            type: boolean
          size:
            type: integer
            format: int32
          content:
            type: array
            items:
              $ref: "#/components/schemas/ProductImage"
          number:
            type: integer
            format: int32
          sort:
            $ref: "#/components/schemas/SortObject"
          pageable:
            $ref: "#/components/schemas/PageableObject"
          numberOfElements:
            type: integer
            format: int32
          empty:
            type: boolean
      PageableObject:
        type: object
        properties:
          offset:
            type: integer
            format: int64
          sort:
            $ref: "#/components/schemas/SortObject"
          paged:
            type: boolean
          pageNumber:
            type: integer
            format: int32
          pageSize:
            type: integer
            format: int32
          unpaged:
            type: boolean
      ProductImage:
        type: object
        properties:
          id:
            type: integer
            format: int64
          imageUrl:
            type: string
          originalName:
            type: string
            maxLength: 255
            minLength: 0
          imageType:
            type: string
            maxLength: 100
            minLength: 0
          isMain:
            type: boolean
          createdAt:
            type: string
            format: date-time
        required:
        - imageType
        - originalName
      SortObject:
        type: object
        properties:
          empty:
            type: boolean
          sorted:
            type: boolean
          unsorted:
            type: boolean
      DefaultResponseString:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            type: string
      PaymentRefundRequest:
        type: object
        properties:
          paymentId:
            type: integer
            format: int64
          refundAmount:
            type: number
            minimum: 0.01
          reason:
            type: string
            maxLength: 500
            minLength: 0
          reverseTransfer:
            type: boolean
        required:
        - paymentId
      DefaultResponsePaymentResponse:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/PaymentResponse"
      PaymentResponse:
        type: object
        properties:
          id:
            type: integer
            format: int64
          uuid:
            type: string
            format: uuid
          userId:
            type: integer
            format: int64
          shoppingCartId:
            type: integer
            format: int64
          stripePaymentIntentId:
            type: string
          amount:
            type: number
          currency:
            type: string
          status:
            type: string
          paymentMethodType:
            type: string
          description:
            type: string
          metadata:
            type: object
            additionalProperties:
              type: object
          stripeChargeId:
            type: string
          failureCode:
            type: string
          failureMessage:
            type: string
          receiptEmail:
            type: string
          receiptUrl:
            type: string
          refundAmount:
            type: number
          refunded:
            type: boolean
          processingFee:
            type: number
          netAmount:
            type: number
          webhookReceived:
            type: boolean
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          completedAt:
            type: string
            format: date-time
          failedAt:
            type: string
            format: date-time
      PaymentConfirmRequest:
        type: object
        properties:
          paymentIntentId:
            type: string
          paymentStatus:
            type: string
        required:
        - paymentIntentId
        - paymentStatus
      PaymentCheckoutRequest:
        type: object
        properties:
          shoppingCartId:
            type: integer
            format: int64
          amount:
            type: number
            minimum: 0.01
          currency:
            type: string
            maxLength: 3
            minLength: 3
            pattern: "^[A-Z]{3}$"
          description:
            type: string
            maxLength: 500
            minLength: 0
          receiptEmail:
            type: string
            maxLength: 100
            minLength: 0
          returnUrl:
            type: string
            maxLength: 255
            minLength: 0
          cancelUrl:
            type: string
            maxLength: 255
            minLength: 0
          metadata:
            type: object
            additionalProperties:
              type: string
          savePaymentMethod:
            type: boolean
          customerId:
            type: string
          allowedPaymentMethodTypes:
            type: array
            items:
              type: string
          confirmationRequired:
            type: boolean
        required:
        - amount
        - currency
        - shoppingCartId
      DefaultResponsePaymentCheckoutResponse:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/PaymentCheckoutResponse"
      PaymentCheckoutResponse:
        type: object
        properties:
          paymentId:
            type: integer
            format: int64
          paymentIntentId:
            type: string
          clientSecret:
            type: string
          amount:
            type: number
          currency:
            type: string
          status:
            type: string
          description:
            type: string
          metadata:
            type: object
            additionalProperties:
              type: object
          returnUrl:
            type: string
          cancelUrl:
            type: string
          publishableKey:
            type: string
          allowedPaymentMethodTypes:
            type: array
            items:
              type: string
          requiresConfirmation:
            type: boolean
      TokenResponse:
        type: object
        properties:
          access_token:
            type: string
          expires_in:
            type: integer
            format: int32
          refresh_expires_in:
            type: integer
            format: int32
          refresh_token:
            type: string
          token_type:
            type: string
          not-before-policy:
            type: integer
            format: int32
          session_state:
            type: string
          scope:
            type: string
      OtpVerificationResponse:
        type: object
        properties:
          success:
            type: boolean
          message:
            type: string
          resetToken:
            type: string
          uuid:
            type: string
      OtpRequest:
        type: object
        properties:
          email:
            type: string
          otp:
            type: string
            pattern: "^\\d{6}$"
        required:
        - email
      DefaultResponsePageUser:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/PageObject"
      ShoppingCartSearchCriteria:
        type: object
        properties:
          userId:
            type: integer
            format: int64
          status:
            type: string
          minTotalAmount:
            type: number
          maxTotalAmount:
            type: number
          minTotalItems:
            type: integer
            format: int32
          maxTotalItems:
            type: integer
            format: int32
          cartId:
            type: integer
            format: int64
      DefaultResponsePageShoppingCart:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/PageObject"
      DefaultResponsePageProduct:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/PageObject"
      DefaultResponsePageProductVariant:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/PageObject"
      DefaultResponsePageProductMedia:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/PageObject"
      DefaultResponsePagePaymentResponse:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/PageObject"
      DefaultResponseListPaymentResponse:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            type: array
            items:
              $ref: "#/components/schemas/PaymentResponse"
      DefaultResponsePaymentStatistics:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/PaymentStatistics"
      PaymentStatistics:
        type: object
        properties:
          totalPayments:
            type: integer
            format: int64
          successfulPayments:
            type: integer
            format: int64
          failedPayments:
            type: integer
            format: int64
          pendingPayments:
            type: integer
            format: int64
          refundedPayments:
            type: integer
            format: int64
          totalAmount:
            type: number
          totalRefunded:
            type: number
          totalProcessingFees:
            type: number
      DefaultResponsePageOrderResponse:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/PageObject"
      DefaultResponsePageCategory:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/PageObject"
      DefaultResponsePageBanner:
        type: object
        properties:
          error:
            type: boolean
          message:
            type: string
          httpStatus:
            type: string
            enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
          body:
            $ref: "#/components/schemas/PageObject"
    securitySchemes:
      bearerAuth:
        type: http
        description: User must be authenticated using SSO user
        in: header
        scheme: bearer
        bearerFormat: JWT
